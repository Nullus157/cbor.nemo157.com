(()=>{var e,t,n,a,o,r,c={640:(e,t,n)=>{"use strict";var a=n(742),o={"text/plain":"Text","text/html":"Url",default:"Text"};e.exports=function(e,t){var n,r,c,i,l,s,d=!1;t||(t={}),n=t.debug||!1;try{if(c=a(),i=document.createRange(),l=document.getSelection(),(s=document.createElement("span")).textContent=e,s.ariaHidden="true",s.style.all="unset",s.style.position="fixed",s.style.top=0,s.style.clip="rect(0, 0, 0, 0)",s.style.whiteSpace="pre",s.style.webkitUserSelect="text",s.style.MozUserSelect="text",s.style.msUserSelect="text",s.style.userSelect="text",s.addEventListener("copy",(function(a){if(a.stopPropagation(),t.format)if(a.preventDefault(),void 0===a.clipboardData){n&&console.warn("unable to use e.clipboardData"),n&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var r=o[t.format]||o.default;window.clipboardData.setData(r,e)}else a.clipboardData.clearData(),a.clipboardData.setData(t.format,e);t.onCopy&&(a.preventDefault(),t.onCopy(a.clipboardData))})),document.body.appendChild(s),i.selectNodeContents(s),l.addRange(i),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");d=!0}catch(a){n&&console.error("unable to copy using execCommand: ",a),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),t.onCopy&&t.onCopy(window.clipboardData),d=!0}catch(a){n&&console.error("unable to copy using clipboardData: ",a),n&&console.error("falling back to prompt"),r=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"âŒ˜":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(r,e)}}finally{l&&("function"==typeof l.removeRange?l.removeRange(i):l.removeAllRanges()),s&&document.body.removeChild(s),c()}return d}},742:e=>{e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],a=0;a<e.rangeCount;a++)n.push(e.getRangeAt(a));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}},519:(e,t,n)=>{"use strict";var a=n(640),o=n.n(a);const r=n.e(880).then(n.bind(n,880)),c=document.getElementById("input"),i=document.getElementById("submit"),l=document.getElementById("hex"),s=document.getElementById("diag"),d=document.getElementById("save"),u=document.getElementById("saved"),m=document.getElementById("copy-button"),p=document.getElementById("copied"),y=document.getElementById("annotate");function f(e,t){try{window.localStorage.setItem(e,JSON.stringify(t))}catch(e){}}function g(e){try{return JSON.parse(window.localStorage.getItem(e))}catch(e){}}try{const e=window.localStorage.getItem("dark");e&&(f("theme",JSON.parse(e)?"dark":"light"),window.localStorage.removeItem("dark"))}catch(e){}const h=g("theme")||"auto";document.querySelector(`input[name="theme"][value="${h}"]`).checked=!0,document.body.dataset.theme=h,y.checked=null==g("annotate")||g("annotate");for(const e of document.querySelectorAll('input[name="theme"]'))e.addEventListener("click",(()=>{f("theme",e.value),document.body.dataset.theme=e.value}));r.then((e=>{function t(t,n){let a;switch(t){case"auto":a=e.parse_auto(n);break;case"hex":a=e.parse_hex(n);break;case"diag":a=e.parse_diag(n)}a=JSON.parse(a),y.checked?l.textContent=a.annotated_hex:l.textContent=a.hex,l.dataset.bytes=a.bytes_length,s.textContent=a.diag}const n=()=>{const e=document.querySelector('input[name="type"]:checked').value;f("type",e),f("value",c.value),f("annotate",y.checked);try{t(e,c.value)}catch(e){l.textContent=e,s.textContent=""}};let a;i.addEventListener("click",n),y.addEventListener("click",n),d.addEventListener("click",(()=>{const e=document.querySelector('input[name="type"]:checked').value;let t=new URL(document.location.toString());t.searchParams.set("type",e),t.searchParams.set("value",c.value),u.href=t.toString(),u.text="Permalink to the playground",m.style.display="inline-block"})),m.addEventListener("click",(()=>{o()(u.href,{format:"text/plain"})&&(p.style.display="inline-block",p.style.transition="opacity 0.1s",p.style.opacity="1",clearTimeout(a),a=setTimeout((()=>{p.style.transition="opacity 5s",p.style.opacity="0",a=setTimeout((()=>{p.style.display="none"}),5e3)}),100))})),c.addEventListener("keydown",(e=>{13==e.keyCode&&(e.metaKey||e.ctrlKey)&&n()})),c.addEventListener("keyup",(()=>{(()=>{const e=document.querySelector('input[name="type"]:checked').value;try{t(e,c.value),f("type",e),f("value",c.value)}catch(e){console.debug(`Failure while trying: ${e}`)}})()}));let r=new URL(document.location.toString()),h=r.searchParams.get("type"),v=r.searchParams.get("value");h&&v||(h=g("type"),v=g("value")),v||(h="hex",v="bf6346756ef563416d7421ff"),h&&v&&(document.querySelector(`input[name="type"][value="${h}"]`).checked=!0,c.value=v,n())}),(e=>l.textContent=e))}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,loaded:!1,exports:{}};return c[e](n,n.exports,l),n.loaded=!0,n.exports}l.m=c,l.c=i,l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>e+".main.js",l.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},l.l=(t,n,a,o)=>{if(e[t])e[t].push(n);else{var r,c;if(void 0!==a)for(var i=document.getElementsByTagName("script"),s=0;s<i.length;s++){var d=i[s];if(d.getAttribute("src")==t){r=d;break}}r||(c=!0,(r=document.createElement("script")).charset="utf-8",r.timeout=120,l.nc&&r.setAttribute("nonce",l.nc),r.src=t),e[t]=[n];var u=(n,a)=>{r.onerror=r.onload=null,clearTimeout(m);var o=e[t];if(delete e[t],r.parentNode&&r.parentNode.removeChild(r),o&&o.forEach((e=>e(a))),n)return n(a)},m=setTimeout(u.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=u.bind(null,r.onerror),r.onload=u.bind(null,r.onload),c&&document.head.appendChild(r)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.p="",(()=>{var e={179:0};l.f.j=(t,n)=>{var a=l.o(e,t)?e[t]:void 0;if(0!==a)if(a)n.push(a[2]);else{var o=new Promise(((n,o)=>a=e[t]=[n,o]));n.push(a[2]=o);var r=l.p+l.u(t),c=new Error;l.l(r,(n=>{if(l.o(e,t)&&(0!==(a=e[t])&&(e[t]=void 0),a)){var o=n&&("load"===n.type?"missing":n.type),r=n&&n.target&&n.target.src;c.message="Loading chunk "+t+" failed.\n("+o+": "+r+")",c.name="ChunkLoadError",c.type=o,c.request=r,a[1](c)}}),"chunk-"+t,t)}};var t=(t,n)=>{var a,o,[r,c,i]=n,s=0;if(r.some((t=>0!==e[t]))){for(a in c)l.o(c,a)&&(l.m[a]=c[a]);i&&i(l)}for(t&&t(n);s<r.length;s++)o=r[s],l.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunk=self.webpackChunk||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),a={},o={681:function(){return{"./index_bg.js":{__wbindgen_error_new:function(e,n){return void 0===t&&(t=l.c[460].exports),t.hd(e,n)},__wbindgen_string_new:function(e,t){return void 0===n&&(n=l.c[460].exports),n.h4(e,t)}}}}},r={880:[681]},l.w={},l.f.wasm=function(e,t){(r[e]||[]).forEach((function(n,r){var c=a[n];if(c)t.push(c);else{var i,s=o[n](),d=fetch(l.p+""+{880:{681:"c77a59a7c36b7c2dbafd"}}[e][n]+".module.wasm");i=s&&"function"==typeof s.then&&"function"==typeof WebAssembly.compileStreaming?Promise.all([WebAssembly.compileStreaming(d),s]).then((function(e){return WebAssembly.instantiate(e[0],e[1])})):"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(d,s):d.then((function(e){return e.arrayBuffer()})).then((function(e){return WebAssembly.instantiate(e,s)})),t.push(a[n]=i.then((function(e){return l.w[n]=(e.instance||e).exports})))}}))},l(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RCxJQUFldEgsTUFBSyxTQUFTMkgsR0FDdEYsT0FBT0YsWUFBWUcsWUFBWUQsRUFBTSxHQUFJQSxFQUFNLEdBQ2hELElBQ3FELG1CQUFyQ0YsWUFBWUkscUJBQ2xCSixZQUFZSSxxQkFBcUJOLEVBQUtELEdBRTdCQyxFQUFJdkgsTUFBSyxTQUFTOEgsR0FBSyxPQUFPQSxFQUFFQyxhQUFlLElBQzNDL0gsTUFBSyxTQUFTTSxHQUNwQyxPQUFPbUgsWUFBWUcsWUFBWXRILEVBQU9nSCxFQUN2QyxJQUVEakUsRUFBUzFGLEtBQUtsRSxFQUFxQjBOLEdBQWdCcEIsRUFBUS9GLE1BQUssU0FBU2dJLEdBQ3hFLE9BQU9wRyxFQUFvQnFGLEVBQUVFLElBQWlCYSxFQUFJQyxVQUFZRCxHQUFLak8sT0FDcEUsSUFDRCxDQUNELEdBQ0QsRWM5RDBCNkgsRUFBb0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS93YXNtIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcHktdG8tY2xpcGJvYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90b2dnbGUtc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFybW9ueSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xuLy8gZGF0YS13ZWJwYWNrIGlzIG5vdCB1c2VkIGFzIGJ1aWxkIGhhcyBubyB1bmlxdWVOYW1lXG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fTtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyB3YXNtIG1vZHVsZXNcbnZhciBpbnN0YWxsZWRXYXNtTW9kdWxlcyA9IHt9O1xuXG5mdW5jdGlvbiBwcm9taXNlUmVzb2x2ZSgpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9XG5cbnZhciB3YXNtSW1wb3J0ZWRGdW5jQ2FjaGUwO1xudmFyIHdhc21JbXBvcnRlZEZ1bmNDYWNoZTE7XG52YXIgd2FzbUltcG9ydE9iamVjdHMgPSB7XG5cdDY4MTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdFwiLi9pbmRleF9iZy5qc1wiOiB7XG5cdFx0XHRcdFwiX193YmluZGdlbl9lcnJvcl9uZXdcIjogZnVuY3Rpb24ocDBpMzIscDFpMzIpIHtcblx0XHRcdFx0XHRpZih3YXNtSW1wb3J0ZWRGdW5jQ2FjaGUwID09PSB1bmRlZmluZWQpIHdhc21JbXBvcnRlZEZ1bmNDYWNoZTAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbNDYwXS5leHBvcnRzO1xuXHRcdFx0XHRcdHJldHVybiB3YXNtSW1wb3J0ZWRGdW5jQ2FjaGUwW1wiaGRcIl0ocDBpMzIscDFpMzIpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIl9fd2JpbmRnZW5fc3RyaW5nX25ld1wiOiBmdW5jdGlvbihwMGkzMixwMWkzMikge1xuXHRcdFx0XHRcdGlmKHdhc21JbXBvcnRlZEZ1bmNDYWNoZTEgPT09IHVuZGVmaW5lZCkgd2FzbUltcG9ydGVkRnVuY0NhY2hlMSA9IF9fd2VicGFja19yZXF1aXJlX18uY1s0NjBdLmV4cG9ydHM7XG5cdFx0XHRcdFx0cmV0dXJuIHdhc21JbXBvcnRlZEZ1bmNDYWNoZTFbXCJoNFwiXShwMGkzMixwMWkzMik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9LFxufTtcblxudmFyIHdhc21Nb2R1bGVNYXAgPSB7XG5cdFwiODgwXCI6IFtcblx0XHQ2ODFcblx0XVxufTtcblxuLy8gb2JqZWN0IHdpdGggYWxsIFdlYkFzc2VtYmx5Lmluc3RhbmNlIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18udyA9IHt9O1xuXG4vLyBGZXRjaCArIGNvbXBpbGUgY2h1bmsgbG9hZGluZyBmb3Igd2ViYXNzZW1ibHlcbl9fd2VicGFja19yZXF1aXJlX18uZi53YXNtID0gZnVuY3Rpb24oY2h1bmtJZCwgcHJvbWlzZXMpIHtcblxuXHR2YXIgd2FzbU1vZHVsZXMgPSB3YXNtTW9kdWxlTWFwW2NodW5rSWRdIHx8IFtdO1xuXG5cdHdhc21Nb2R1bGVzLmZvckVhY2goZnVuY3Rpb24od2FzbU1vZHVsZUlkLCBpZHgpIHtcblx0XHR2YXIgaW5zdGFsbGVkV2FzbU1vZHVsZURhdGEgPSBpbnN0YWxsZWRXYXNtTW9kdWxlc1t3YXNtTW9kdWxlSWRdO1xuXG5cdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIiBvciBcImFscmVhZHkgbG9hZGVkXCIuXG5cdFx0aWYoaW5zdGFsbGVkV2FzbU1vZHVsZURhdGEpXG5cdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZFdhc21Nb2R1bGVEYXRhKTtcblx0XHRlbHNlIHtcblx0XHRcdHZhciBpbXBvcnRPYmplY3QgPSB3YXNtSW1wb3J0T2JqZWN0c1t3YXNtTW9kdWxlSWRdKCk7XG5cdFx0XHR2YXIgcmVxID0gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIHtcIjg4MFwiOntcIjY4MVwiOlwiYzc3YTU5YTdjMzZiN2MyZGJhZmRcIn19W2NodW5rSWRdW3dhc21Nb2R1bGVJZF0gKyBcIi5tb2R1bGUud2FzbVwiKTtcblx0XHRcdHZhciBwcm9taXNlO1xuXHRcdFx0aWYoaW1wb3J0T2JqZWN0ICYmIHR5cGVvZiBpbXBvcnRPYmplY3QudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgV2ViQXNzZW1ibHkuY29tcGlsZVN0cmVhbWluZyA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRwcm9taXNlID0gUHJvbWlzZS5hbGwoW1dlYkFzc2VtYmx5LmNvbXBpbGVTdHJlYW1pbmcocmVxKSwgaW1wb3J0T2JqZWN0XSkudGhlbihmdW5jdGlvbihpdGVtcykge1xuXHRcdFx0XHRcdHJldHVybiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShpdGVtc1swXSwgaXRlbXNbMV0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSBpZih0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cHJvbWlzZSA9IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKHJlcSwgaW1wb3J0T2JqZWN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBieXRlc1Byb21pc2UgPSByZXEudGhlbihmdW5jdGlvbih4KSB7IHJldHVybiB4LmFycmF5QnVmZmVyKCk7IH0pO1xuXHRcdFx0XHRwcm9taXNlID0gYnl0ZXNQcm9taXNlLnRoZW4oZnVuY3Rpb24oYnl0ZXMpIHtcblx0XHRcdFx0XHRyZXR1cm4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoYnl0ZXMsIGltcG9ydE9iamVjdCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRXYXNtTW9kdWxlc1t3YXNtTW9kdWxlSWRdID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlcykge1xuXHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy53W3dhc21Nb2R1bGVJZF0gPSAocmVzLmluc3RhbmNlIHx8IHJlcykuZXhwb3J0cztcblx0XHRcdH0pKTtcblx0XHR9XG5cdH0pO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGRlc2VsZWN0Q3VycmVudCA9IHJlcXVpcmUoXCJ0b2dnbGUtc2VsZWN0aW9uXCIpO1xuXG52YXIgY2xpcGJvYXJkVG9JRTExRm9ybWF0dGluZyA9IHtcbiAgXCJ0ZXh0L3BsYWluXCI6IFwiVGV4dFwiLFxuICBcInRleHQvaHRtbFwiOiBcIlVybFwiLFxuICBcImRlZmF1bHRcIjogXCJUZXh0XCJcbn1cblxudmFyIGRlZmF1bHRNZXNzYWdlID0gXCJDb3B5IHRvIGNsaXBib2FyZDogI3trZXl9LCBFbnRlclwiO1xuXG5mdW5jdGlvbiBmb3JtYXQobWVzc2FnZSkge1xuICB2YXIgY29weUtleSA9ICgvbWFjIG9zIHgvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gXCLijJhcIiA6IFwiQ3RybFwiKSArIFwiK0NcIjtcbiAgcmV0dXJuIG1lc3NhZ2UucmVwbGFjZSgvI3tcXHMqa2V5XFxzKn0vZywgY29weUtleSk7XG59XG5cbmZ1bmN0aW9uIGNvcHkodGV4dCwgb3B0aW9ucykge1xuICB2YXIgZGVidWcsXG4gICAgbWVzc2FnZSxcbiAgICByZXNlbGVjdFByZXZpb3VzLFxuICAgIHJhbmdlLFxuICAgIHNlbGVjdGlvbixcbiAgICBtYXJrLFxuICAgIHN1Y2Nlc3MgPSBmYWxzZTtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZyB8fCBmYWxzZTtcbiAgdHJ5IHtcbiAgICByZXNlbGVjdFByZXZpb3VzID0gZGVzZWxlY3RDdXJyZW50KCk7XG5cbiAgICByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICBtYXJrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgbWFyay50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgLy8gYXZvaWQgc2NyZWVuIHJlYWRlcnMgZnJvbSByZWFkaW5nIG91dCBsb3VkIHRoZSB0ZXh0XG4gICAgbWFyay5hcmlhSGlkZGVuID0gXCJ0cnVlXCJcbiAgICAvLyByZXNldCB1c2VyIHN0eWxlcyBmb3Igc3BhbiBlbGVtZW50XG4gICAgbWFyay5zdHlsZS5hbGwgPSBcInVuc2V0XCI7XG4gICAgLy8gcHJldmVudHMgc2Nyb2xsaW5nIHRvIHRoZSBlbmQgb2YgdGhlIHBhZ2VcbiAgICBtYXJrLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIG1hcmsuc3R5bGUudG9wID0gMDtcbiAgICBtYXJrLnN0eWxlLmNsaXAgPSBcInJlY3QoMCwgMCwgMCwgMClcIjtcbiAgICAvLyB1c2VkIHRvIHByZXNlcnZlIHNwYWNlcyBhbmQgbGluZSBicmVha3NcbiAgICBtYXJrLnN0eWxlLndoaXRlU3BhY2UgPSBcInByZVwiO1xuICAgIC8vIGRvIG5vdCBpbmhlcml0IHVzZXItc2VsZWN0IChpdCBtYXkgYmUgYG5vbmVgKVxuICAgIG1hcmsuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUuTW96VXNlclNlbGVjdCA9IFwidGV4dFwiO1xuICAgIG1hcmsuc3R5bGUubXNVc2VyU2VsZWN0ID0gXCJ0ZXh0XCI7XG4gICAgbWFyay5zdHlsZS51c2VyU2VsZWN0ID0gXCJ0ZXh0XCI7XG4gICAgbWFyay5hZGRFdmVudExpc3RlbmVyKFwiY29weVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBlLmNsaXBib2FyZERhdGEgPT09IFwidW5kZWZpbmVkXCIpIHsgLy8gSUUgMTFcbiAgICAgICAgICBkZWJ1ZyAmJiBjb25zb2xlLndhcm4oXCJ1bmFibGUgdG8gdXNlIGUuY2xpcGJvYXJkRGF0YVwiKTtcbiAgICAgICAgICBkZWJ1ZyAmJiBjb25zb2xlLndhcm4oXCJ0cnlpbmcgSUUgc3BlY2lmaWMgc3R1ZmZcIik7XG4gICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuY2xlYXJEYXRhKCk7XG4gICAgICAgICAgdmFyIGZvcm1hdCA9IGNsaXBib2FyZFRvSUUxMUZvcm1hdHRpbmdbb3B0aW9ucy5mb3JtYXRdIHx8IGNsaXBib2FyZFRvSUUxMUZvcm1hdHRpbmdbXCJkZWZhdWx0XCJdXG4gICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YShmb3JtYXQsIHRleHQpO1xuICAgICAgICB9IGVsc2UgeyAvLyBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgICBlLmNsaXBib2FyZERhdGEuY2xlYXJEYXRhKCk7XG4gICAgICAgICAgZS5jbGlwYm9hcmREYXRhLnNldERhdGEob3B0aW9ucy5mb3JtYXQsIHRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5vbkNvcHkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvcHRpb25zLm9uQ29weShlLmNsaXBib2FyZERhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtYXJrKTtcblxuICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhtYXJrKTtcbiAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuXG4gICAgdmFyIHN1Y2Nlc3NmdWwgPSBkb2N1bWVudC5leGVjQ29tbWFuZChcImNvcHlcIik7XG4gICAgaWYgKCFzdWNjZXNzZnVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3B5IGNvbW1hbmQgd2FzIHVuc3VjY2Vzc2Z1bFwiKTtcbiAgICB9XG4gICAgc3VjY2VzcyA9IHRydWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlYnVnICYmIGNvbnNvbGUuZXJyb3IoXCJ1bmFibGUgdG8gY29weSB1c2luZyBleGVjQ29tbWFuZDogXCIsIGVycik7XG4gICAgZGVidWcgJiYgY29uc29sZS53YXJuKFwidHJ5aW5nIElFIHNwZWNpZmljIHN0dWZmXCIpO1xuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YS5zZXREYXRhKG9wdGlvbnMuZm9ybWF0IHx8IFwidGV4dFwiLCB0ZXh0KTtcbiAgICAgIG9wdGlvbnMub25Db3B5ICYmIG9wdGlvbnMub25Db3B5KHdpbmRvdy5jbGlwYm9hcmREYXRhKTtcbiAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZGVidWcgJiYgY29uc29sZS5lcnJvcihcInVuYWJsZSB0byBjb3B5IHVzaW5nIGNsaXBib2FyZERhdGE6IFwiLCBlcnIpO1xuICAgICAgZGVidWcgJiYgY29uc29sZS5lcnJvcihcImZhbGxpbmcgYmFjayB0byBwcm9tcHRcIik7XG4gICAgICBtZXNzYWdlID0gZm9ybWF0KFwibWVzc2FnZVwiIGluIG9wdGlvbnMgPyBvcHRpb25zLm1lc3NhZ2UgOiBkZWZhdWx0TWVzc2FnZSk7XG4gICAgICB3aW5kb3cucHJvbXB0KG1lc3NhZ2UsIHRleHQpO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdGlvbi5yZW1vdmVSYW5nZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZVJhbmdlKHJhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWFyaykge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChtYXJrKTtcbiAgICB9XG4gICAgcmVzZWxlY3RQcmV2aW91cygpO1xuICB9XG5cbiAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weTtcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuICB2YXIgYWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICB2YXIgcmFuZ2VzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0aW9uLnJhbmdlQ291bnQ7IGkrKykge1xuICAgIHJhbmdlcy5wdXNoKHNlbGVjdGlvbi5nZXRSYW5nZUF0KGkpKTtcbiAgfVxuXG4gIHN3aXRjaCAoYWN0aXZlLnRhZ05hbWUudG9VcHBlckNhc2UoKSkgeyAvLyAudG9VcHBlckNhc2UgaGFuZGxlcyBYSFRNTFxuICAgIGNhc2UgJ0lOUFVUJzpcbiAgICBjYXNlICdURVhUQVJFQSc6XG4gICAgICBhY3RpdmUuYmx1cigpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgYWN0aXZlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHNlbGVjdGlvbi50eXBlID09PSAnQ2FyZXQnICYmXG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgcmFuZ2VzLmZvckVhY2goZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFjdGl2ZSAmJlxuICAgIGFjdGl2ZS5mb2N1cygpO1xuICB9O1xufTtcbiIsImNvbnN0IGNib3IgPSBpbXBvcnQoXCIuLi9idWlsZFwiKVxuaW1wb3J0IGNvcHkgZnJvbSAnY29weS10by1jbGlwYm9hcmQnXG5cbmNvbnN0IGlucHV0ID0gPEhUTUxUZXh0QXJlYUVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0JylcbmNvbnN0IHN1Ym1pdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdWJtaXQnKVxuY29uc3QgaGV4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hleCcpXG5jb25zdCBkaWFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpYWcnKVxuY29uc3Qgc2F2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlJylcbmNvbnN0IHNhdmVkID0gPEhUTUxBbmNob3JFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlZCcpXG5jb25zdCBjb3B5QnV0dG9uID0gPEhUTUxCdXR0b25FbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3B5LWJ1dHRvbicpXG5jb25zdCBjb3BpZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29waWVkJylcbmNvbnN0IGFubm90YXRlID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Fubm90YXRlJylcblxuZnVuY3Rpb24gc3RvcmUoc2V0dGluZzogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gIHRyeSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKHNldHRpbmcsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSlcbiAgfSBjYXRjaCB7XG4gIH1cbn1cblxuZnVuY3Rpb24gbG9hZDxUPihzZXR0aW5nOiBzdHJpbmcpOiBUIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZSh3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oc2V0dGluZykpXG4gIH0gY2F0Y2gge1xuICB9XG59XG5cbnRyeSB7XG4gIGNvbnN0IGRhcmsgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhcmsnKVxuICBpZiAoZGFyaykge1xuICAgIHN0b3JlKCd0aGVtZScsIEpTT04ucGFyc2UoZGFyaykgPyAnZGFyaycgOiAnbGlnaHQnKVxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnZGFyaycpXG4gIH1cbn0gY2F0Y2gge1xufVxuXG5jb25zdCB0aGVtZSA9IGxvYWQ8c3RyaW5nPigndGhlbWUnKSB8fCAnYXV0byc7XG5cbig8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFtuYW1lPVwidGhlbWVcIl1bdmFsdWU9XCIke3RoZW1lfVwiXWApKS5jaGVja2VkID0gdHJ1ZVxuZG9jdW1lbnQuYm9keS5kYXRhc2V0LnRoZW1lID0gdGhlbWVcblxuYW5ub3RhdGUuY2hlY2tlZCA9IGxvYWQoJ2Fubm90YXRlJykgPT0gbnVsbCA/IHRydWUgOiBsb2FkKCdhbm5vdGF0ZScpXG5cbmZvciAoY29uc3QgZWwgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbDxIVE1MSW5wdXRFbGVtZW50PignaW5wdXRbbmFtZT1cInRoZW1lXCJdJykpIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgc3RvcmUoJ3RoZW1lJywgZWwudmFsdWUpXG4gICAgZG9jdW1lbnQuYm9keS5kYXRhc2V0LnRoZW1lID0gZWwudmFsdWVcbiAgfSlcbn1cblxuY2Jvci50aGVuKGNib3IgPT4ge1xuICBmdW5jdGlvbiBwYXJzZSh0eXBlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBsZXQgcmVzdWx0XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgICByZXN1bHQgPSBjYm9yLnBhcnNlX2F1dG8odmFsdWUpXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXN1bHQgPSBjYm9yLnBhcnNlX2hleCh2YWx1ZSlcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2RpYWcnOlxuICAgICAgICByZXN1bHQgPSBjYm9yLnBhcnNlX2RpYWcodmFsdWUpXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KVxuXG4gICAgaWYgKGFubm90YXRlLmNoZWNrZWQpIHtcbiAgICAgIGhleC50ZXh0Q29udGVudCA9IHJlc3VsdC5hbm5vdGF0ZWRfaGV4XG4gICAgfSBlbHNlIHtcbiAgICAgIGhleC50ZXh0Q29udGVudCA9IHJlc3VsdC5oZXhcbiAgICB9XG4gICAgaGV4LmRhdGFzZXQuYnl0ZXMgPSByZXN1bHQuYnl0ZXNfbGVuZ3RoXG4gICAgZGlhZy50ZXh0Q29udGVudCA9IHJlc3VsdC5kaWFnXG4gIH1cblxuICBjb25zdCBwcm9jZXNzID0gKCkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInR5cGVcIl06Y2hlY2tlZCcpKS52YWx1ZTtcbiAgICBzdG9yZSgndHlwZScsIHR5cGUpXG4gICAgc3RvcmUoJ3ZhbHVlJywgaW5wdXQudmFsdWUpXG4gICAgc3RvcmUoJ2Fubm90YXRlJywgYW5ub3RhdGUuY2hlY2tlZClcbiAgICB0cnkge1xuICAgICAgcGFyc2UodHlwZSwgaW5wdXQudmFsdWUpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBoZXgudGV4dENvbnRlbnQgPSBlcnJcbiAgICAgIGRpYWcudGV4dENvbnRlbnQgPSAnJ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHRyeVByb2Nlc3MgPSAoKSA9PiB7XG4gICAgY29uc3QgdHlwZSA9ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwidHlwZVwiXTpjaGVja2VkJykpLnZhbHVlO1xuICAgIHRyeSB7XG4gICAgICBwYXJzZSh0eXBlLCBpbnB1dC52YWx1ZSlcbiAgICAgIHN0b3JlKCd0eXBlJywgdHlwZSlcbiAgICAgIHN0b3JlKCd2YWx1ZScsIGlucHV0LnZhbHVlKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5kZWJ1ZyhgRmFpbHVyZSB3aGlsZSB0cnlpbmc6ICR7ZXJyfWApXG4gICAgfVxuICB9XG5cbiAgc3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcHJvY2VzcylcbiAgYW5ub3RhdGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwcm9jZXNzKVxuXG4gIHNhdmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgdHlwZSA9ICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwidHlwZVwiXTpjaGVja2VkJykpLnZhbHVlXG4gICAgbGV0IHVybCA9IG5ldyBVUkwoZG9jdW1lbnQubG9jYXRpb24udG9TdHJpbmcoKSlcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcInR5cGVcIiwgdHlwZSlcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcInZhbHVlXCIsIGlucHV0LnZhbHVlKVxuICAgIHNhdmVkLmhyZWYgPSB1cmwudG9TdHJpbmcoKVxuICAgIHNhdmVkLnRleHQgPSAnUGVybWFsaW5rIHRvIHRoZSBwbGF5Z3JvdW5kJ1xuICAgIGNvcHlCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snXG4gIH0pXG5cbiAgbGV0IGNvcHlUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PjtcbiAgY29weUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBpZiAoY29weShzYXZlZC5ocmVmLCB7IGZvcm1hdDogJ3RleHQvcGxhaW4nIH0pKSB7XG4gICAgICBjb3BpZWQuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snXG4gICAgICBjb3BpZWQuc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5IDAuMXMnXG4gICAgICBjb3BpZWQuc3R5bGUub3BhY2l0eSA9ICcxJ1xuICAgICAgY2xlYXJUaW1lb3V0KGNvcHlUaW1lb3V0KVxuICAgICAgY29weVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29waWVkLnN0eWxlLnRyYW5zaXRpb24gPSAnb3BhY2l0eSA1cydcbiAgICAgICAgY29waWVkLnN0eWxlLm9wYWNpdHkgPSAnMCdcbiAgICAgICAgY29weVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBjb3BpZWQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICB9LCA1MDAwKVxuICAgICAgfSwgMTAwKVxuICAgIH1cbiAgfSlcblxuICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG4gICAgaWYgKGUua2V5Q29kZSA9PSAxMyAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSkpIHtcbiAgICAgIHByb2Nlc3MoKVxuICAgIH1cbiAgfSlcblxuICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsICgpID0+IHtcbiAgICB0cnlQcm9jZXNzKClcbiAgfSlcblxuICBsZXQgdXJsID0gbmV3IFVSTChkb2N1bWVudC5sb2NhdGlvbi50b1N0cmluZygpKTtcbiAgbGV0IHR5cGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldChcInR5cGVcIik7XG4gIGxldCB2YWx1ZSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KFwidmFsdWVcIik7XG5cbiAgaWYgKCF0eXBlIHx8ICF2YWx1ZSkge1xuICAgIHR5cGUgPSBsb2FkKCd0eXBlJylcbiAgICB2YWx1ZSA9IGxvYWQoJ3ZhbHVlJylcbiAgfVxuXG4gIGlmICghdmFsdWUpIHtcbiAgICB0eXBlID0gJ2hleCdcbiAgICB2YWx1ZSA9ICdiZjYzNDY3NTZlZjU2MzQxNmQ3NDIxZmYnXG4gIH1cblxuICBpZiAodHlwZSAmJiB2YWx1ZSkge1xuICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFtuYW1lPVwidHlwZVwiXVt2YWx1ZT1cIiR7dHlwZX1cIl1gKSkuY2hlY2tlZCA9IHRydWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICBwcm9jZXNzKCk7XG4gIH1cblxufSwgZXJyID0+IGhleC50ZXh0Q29udGVudCA9IGVycilcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5tYWluLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6ICgpID0+IHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblxufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTE5KTtcbiJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwid2FzbUltcG9ydGVkRnVuY0NhY2hlMCIsIndhc21JbXBvcnRlZEZ1bmNDYWNoZTEiLCJpbnN0YWxsZWRXYXNtTW9kdWxlcyIsIndhc21JbXBvcnRPYmplY3RzIiwid2FzbU1vZHVsZU1hcCIsImRlc2VsZWN0Q3VycmVudCIsImNsaXBib2FyZFRvSUUxMUZvcm1hdHRpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwidGV4dCIsIm9wdGlvbnMiLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJyZXNlbGVjdFByZXZpb3VzIiwicmFuZ2UiLCJzZWxlY3Rpb24iLCJtYXJrIiwic3VjY2VzcyIsImRvY3VtZW50IiwiY3JlYXRlUmFuZ2UiLCJnZXRTZWxlY3Rpb24iLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJhcmlhSGlkZGVuIiwic3R5bGUiLCJhbGwiLCJwb3NpdGlvbiIsInRvcCIsImNsaXAiLCJ3aGl0ZVNwYWNlIiwid2Via2l0VXNlclNlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJtc1VzZXJTZWxlY3QiLCJ1c2VyU2VsZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJmb3JtYXQiLCJwcmV2ZW50RGVmYXVsdCIsImNsaXBib2FyZERhdGEiLCJjb25zb2xlIiwid2FybiIsIndpbmRvdyIsImNsZWFyRGF0YSIsInNldERhdGEiLCJvbkNvcHkiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJhZGRSYW5nZSIsImV4ZWNDb21tYW5kIiwiRXJyb3IiLCJlcnIiLCJlcnJvciIsImNvcHlLZXkiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicmVwbGFjZSIsInByb21wdCIsInJlbW92ZVJhbmdlIiwicmVtb3ZlQWxsUmFuZ2VzIiwicmVtb3ZlQ2hpbGQiLCJyYW5nZUNvdW50IiwiYWN0aXZlIiwiYWN0aXZlRWxlbWVudCIsInJhbmdlcyIsImkiLCJwdXNoIiwiZ2V0UmFuZ2VBdCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsImJsdXIiLCJ0eXBlIiwiZm9yRWFjaCIsImZvY3VzIiwiY2JvciIsImlucHV0IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdWJtaXQiLCJoZXgiLCJkaWFnIiwic2F2ZSIsInNhdmVkIiwiY29weUJ1dHRvbiIsImNvcGllZCIsImFubm90YXRlIiwic3RvcmUiLCJzZXR0aW5nIiwidmFsdWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImxvYWQiLCJwYXJzZSIsImdldEl0ZW0iLCJkYXJrIiwicmVtb3ZlSXRlbSIsInRoZW1lIiwicXVlcnlTZWxlY3RvciIsImNoZWNrZWQiLCJkYXRhc2V0IiwiZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGhlbiIsInJlc3VsdCIsInBhcnNlX2F1dG8iLCJwYXJzZV9oZXgiLCJwYXJzZV9kaWFnIiwiYW5ub3RhdGVkX2hleCIsImJ5dGVzIiwiYnl0ZXNfbGVuZ3RoIiwicHJvY2VzcyIsImNvcHlUaW1lb3V0IiwidXJsIiwiVVJMIiwibG9jYXRpb24iLCJ0b1N0cmluZyIsInNlYXJjaFBhcmFtcyIsInNldCIsImhyZWYiLCJkaXNwbGF5IiwidHJhbnNpdGlvbiIsIm9wYWNpdHkiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwia2V5Q29kZSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwidHJ5UHJvY2VzcyIsImdldCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJjIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZiIsImNodW5rSWQiLCJQcm9taXNlIiwia2V5cyIsInJlZHVjZSIsInByb21pc2VzIiwidSIsImhtZCIsImNyZWF0ZSIsImNoaWxkcmVuIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsImZuIiwiYmluZCIsInRhcmdldCIsImhlYWQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJwIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsIm5hbWUiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImRhdGEiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwicDBpMzIiLCJwMWkzMiIsInciLCJ3YXNtIiwid2FzbU1vZHVsZUlkIiwiaWR4IiwiaW5zdGFsbGVkV2FzbU1vZHVsZURhdGEiLCJpbXBvcnRPYmplY3QiLCJyZXEiLCJmZXRjaCIsIldlYkFzc2VtYmx5IiwiY29tcGlsZVN0cmVhbWluZyIsIml0ZW1zIiwiaW5zdGFudGlhdGUiLCJpbnN0YW50aWF0ZVN0cmVhbWluZyIsIngiLCJhcnJheUJ1ZmZlciIsInJlcyIsImluc3RhbmNlIl0sInNvdXJjZVJvb3QiOiIifQ==