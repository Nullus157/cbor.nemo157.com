(()=>{var e,t,n,o,a,r,c={640:(e,t,n)=>{"use strict";var o=n(742),a={"text/plain":"Text","text/html":"Url",default:"Text"};e.exports=function(e,t){var n,r,c,i,l,s,d=!1;t||(t={}),n=t.debug||!1;try{if(c=o(),i=document.createRange(),l=document.getSelection(),(s=document.createElement("span")).textContent=e,s.ariaHidden="true",s.style.all="unset",s.style.position="fixed",s.style.top=0,s.style.clip="rect(0, 0, 0, 0)",s.style.whiteSpace="pre",s.style.webkitUserSelect="text",s.style.MozUserSelect="text",s.style.msUserSelect="text",s.style.userSelect="text",s.addEventListener("copy",(function(o){if(o.stopPropagation(),t.format)if(o.preventDefault(),void 0===o.clipboardData){n&&console.warn("unable to use e.clipboardData"),n&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var r=a[t.format]||a.default;window.clipboardData.setData(r,e)}else o.clipboardData.clearData(),o.clipboardData.setData(t.format,e);t.onCopy&&(o.preventDefault(),t.onCopy(o.clipboardData))})),document.body.appendChild(s),i.selectNodeContents(s),l.addRange(i),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");d=!0}catch(o){n&&console.error("unable to copy using execCommand: ",o),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),t.onCopy&&t.onCopy(window.clipboardData),d=!0}catch(o){n&&console.error("unable to copy using clipboardData: ",o),n&&console.error("falling back to prompt"),r=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"âŒ˜":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(r,e)}}finally{l&&("function"==typeof l.removeRange?l.removeRange(i):l.removeAllRanges()),s&&document.body.removeChild(s),c()}return d}},742:e=>{e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],o=0;o<e.rangeCount;o++)n.push(e.getRangeAt(o));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}},519:(e,t,n)=>{"use strict";var o=n(640),a=n.n(o);const r=n.e(880).then(n.bind(n,880)),c=document.getElementById("input"),i=document.getElementById("submit"),l=document.getElementById("hex"),s=document.getElementById("diag"),d=document.getElementById("save"),u=document.getElementById("saved"),m=document.getElementById("copy-button"),p=document.getElementById("copied"),y=document.getElementById("annotate");function f(e,t){try{window.localStorage.setItem(e,JSON.stringify(t))}catch(e){}}function g(e){try{return JSON.parse(window.localStorage.getItem(e))}catch(e){}}try{const e=window.localStorage.getItem("dark");e&&(f("theme",JSON.parse(e)?"dark":"light"),window.localStorage.removeItem("dark"))}catch(e){}const h=g("theme")||"auto";document.querySelector(`input[name="theme"][value="${h}"]`).checked=!0,document.body.dataset.theme=h,y.checked=null==g("annotate")||g("annotate");for(const e of document.querySelectorAll('input[name="theme"]'))e.addEventListener("click",(()=>{f("theme",e.value),document.body.dataset.theme=e.value}));r.then((e=>{function t(t,n){let o;switch(t){case"auto":o=e.parse_auto(n);break;case"hex":o=e.parse_hex(n);break;case"diag":o=e.parse_diag(n)}o=JSON.parse(o),y.checked?l.textContent=o.annotated_hex:l.textContent=o.hex,l.dataset.bytes=o.bytes_length,s.textContent=o.diag}const n=()=>{const e=document.querySelector('input[name="type"]:checked').value;f("type",e),f("value",c.value),f("annotate",y.checked);try{t(e,c.value)}catch(e){l.textContent=e,s.textContent=""}};let o;i.addEventListener("click",n),y.addEventListener("click",n),d.addEventListener("click",(()=>{const e=document.querySelector('input[name="type"]:checked').value;let t=new URL(document.location.toString());t.searchParams.set("type",e),t.searchParams.set("value",c.value),u.href=t.toString(),u.text="Permalink to the playground",m.style.display="inline-block"})),m.addEventListener("click",(()=>{a()(u.href,{format:"text/plain"})&&(p.style.display="inline-block",p.style.transition="opacity 0.1s",p.style.opacity="1",clearTimeout(o),o=setTimeout((()=>{p.style.transition="opacity 5s",p.style.opacity="0",o=setTimeout((()=>{p.style.display="none"}),5e3)}),100))})),c.addEventListener("keydown",(e=>{13==e.keyCode&&(e.metaKey||e.ctrlKey)&&n()})),c.addEventListener("keyup",(()=>{(()=>{const e=document.querySelector('input[name="type"]:checked').value;try{t(e,c.value),f("type",e),f("value",c.value)}catch(e){console.debug(`Failure while trying: ${e}`)}})()}));let r=new URL(document.location.toString()),h=r.searchParams.get("type"),v=r.searchParams.get("value");h&&v||(h=g("type"),v=g("value")),v||(h="hex",v="bf6346756ef563416d7421ff"),h&&v&&(document.querySelector(`input[name="type"][value="${h}"]`).checked=!0,c.value=v,n())}),(e=>l.textContent=e))}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={id:e,loaded:!1,exports:{}};return c[e](n,n.exports,l),n.loaded=!0,n.exports}l.m=c,l.c=i,l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},l.d=(e,t)=>{for(var n in t)l.o(t,n)&&!l.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,n)=>(l.f[n](e,t),t)),[])),l.u=e=>e+".main.js",l.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},l.l=(t,n,o,a)=>{if(e[t])e[t].push(n);else{var r,c;if(void 0!==o)for(var i=document.getElementsByTagName("script"),s=0;s<i.length;s++){var d=i[s];if(d.getAttribute("src")==t){r=d;break}}r||(c=!0,(r=document.createElement("script")).charset="utf-8",r.timeout=120,l.nc&&r.setAttribute("nonce",l.nc),r.src=t),e[t]=[n];var u=(n,o)=>{r.onerror=r.onload=null,clearTimeout(m);var a=e[t];if(delete e[t],r.parentNode&&r.parentNode.removeChild(r),a&&a.forEach((e=>e(o))),n)return n(o)},m=setTimeout(u.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=u.bind(null,r.onerror),r.onload=u.bind(null,r.onload),c&&document.head.appendChild(r)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.p="",(()=>{var e={179:0};l.f.j=(t,n)=>{var o=l.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var a=new Promise(((n,a)=>o=e[t]=[n,a]));n.push(o[2]=a);var r=l.p+l.u(t),c=new Error;l.l(r,(n=>{if(l.o(e,t)&&(0!==(o=e[t])&&(e[t]=void 0),o)){var a=n&&("load"===n.type?"missing":n.type),r=n&&n.target&&n.target.src;c.message="Loading chunk "+t+" failed.\n("+a+": "+r+")",c.name="ChunkLoadError",c.type=a,c.request=r,o[1](c)}}),"chunk-"+t,t)}};var t=(t,n)=>{var o,a,[r,c,i]=n,s=0;if(r.some((t=>0!==e[t]))){for(o in c)l.o(c,o)&&(l.m[o]=c[o]);i&&i(l)}for(t&&t(n);s<r.length;s++)a=r[s],l.o(e,a)&&e[a]&&e[a][0](),e[a]=0},n=self.webpackChunk=self.webpackChunk||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),o={},a={681:function(){return{"./index_bg.js":{__wbindgen_error_new:function(e,n){return void 0===t&&(t=l.c[460].exports),t.hd(e,n)},__wbindgen_string_new:function(e,t){return void 0===n&&(n=l.c[460].exports),n.h4(e,t)}}}}},r={880:[681]},l.w={},l.f.wasm=function(e,t){(r[e]||[]).forEach((function(n,r){var c=o[n];if(c)t.push(c);else{var i,s=a[n](),d=fetch(l.p+""+{880:{681:"7e86e290d30a7f53c2ed"}}[e][n]+".module.wasm");i=s&&"function"==typeof s.then&&"function"==typeof WebAssembly.compileStreaming?Promise.all([WebAssembly.compileStreaming(d),s]).then((function(e){return WebAssembly.instantiate(e[0],e[1])})):"function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(d,s):d.then((function(e){return e.arrayBuffer()})).then((function(e){return WebAssembly.instantiate(e,s)})),t.push(o[n]=i.then((function(e){return l.w[n]=(e.instance||e).exports})))}}))},l(519)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,